#!/bin/bash

## ########################################################################## ##
## Several helpful functions - script handling:
##
## ########################################################################## ##
export FUNC_SCRIPT_HANDLING="true"

## -------------------------------------------------------------------------- ##
## FUNCTIONS:
## -------------------------------------------------------------------------- ##
## change to directory
func_change_to_dir(){ # dir="$1"
  [ -d "$1" ] || mkdir -p "$1"
  cd "$1" || exit 1
}

## make directory directory
func_build_dir(){ # dir="$1"
  [ -d "$1" ] || mkdir -p "$1"
}

## check dir
func_check_dir(){ # dir="$1"
  [ -d  "$1" ] || return 1
  return 0
}

## copy dir
func_copy_dir(){ # source="$1"; destination="$2"
  sudo cp -ax "$1"/. "$2"/
}

## remove dir
func_remove_dir(){ # dir="$1"
  [ -d "$1" ] && sudo rm -rf "$1"
}

## remove file
func_remove_file(){ # file="$1"
  [ -f "$1" ] && sudo rm -f "$1"
}

## fatal error
func_fatal_error(){ # text="$1"
  echo "$1"; echo "Press enter to continue..."; read -r; exit 1
}

## pause for callees
func_pause(){
  [ "${CALLEE}" = "true" ] || { echo "Press enter to continue..."; read -r; }
}

## -------------------------------------------------------------------------- ##
## generate a transcription over a script process
func_start_transcription(){ # script_file="$1"; transcription_file="$2"
  local script_file transcription_file transcription_path
  script_file="$1"; transcription_file="$2"

  transcription_path=$(dirname "${transcription_file}")
  [ -d "${transcription_path}" ] || mkdir -p "${transcription_path}"

  script --command "${script_file}" "${transcription_file}"
}

## show a transcription result
func_show_transcription_result(){ # transcription_file
  local transcription_file
  transcription_file="$1"

  if [ -f "${transcription_file}" ]; then
    less -r "${transcription_file}"
  else
    echo "The file ${transcription_file} does not exist !!!"
  fi
}

## -------------------------------------------------------------------------- ##
## extract TAR file
## note: -C, --directory=[DIR] => cd [DIR], before any operations are executed
func_tar_extract_archiv(){ # tar_file_name="$1"; dest_dir="$2"; comp_type="$3"
  local tar_file_name dest_dir base_dir

  tar_file_name="$1.tar";  dest_dir="$2"; comp_type="$3"
  [ -n "${comp_type}" ] && tar_file_name="${tar_file_name}.${comp_type}"
  base_dir="$PWD"

  ## create destination dir if necessary
  [ -d "${dest_dir}" ] || mkdir "${dest_dir}"

  cmd="sudo tar -xf ${tar_file_name} --${comp_type} --strip-components=1"
  cmd="${cmd} -C ${dest_dir}"
  #echo "${cmd}"
  eval "${cmd}"
  cd "${base_dir}" || exit 1
}

## create TAR file
func_tar_create_archiv(){ #input="$1"; tar_file_name="$2"; comp_type="$3"
  local input comp_type tar_file_name cmd
  comp_type="$3"
  input="$1" tar_file_name="$2"
  [ -n "${comp_type}" ] && tar_file_name="$2.${comp_type}"

  ## do not process if TAR file exist
  [ -f "${tar_file_name}" ] && return 1

  cmd="sudo tar -cf ${tar_file_name} --${comp_type} ${input}"
  #echo "${cmd}"
  eval "${cmd}"
}

## delete files from existing TAR file
func_tar_delete_files(){ #file_list="$1"; tar_file_name="$2"
  local input comp_type tar_file_name cmd
  file_list="$1"; tar_file_name="$2"

  cmd="sudo tar -f ${tar_file_name} --delete --wildcards ${file_list}"
  #echo "${cmd}"
  eval "${cmd}"
}

## create a file list
func_build_list(){ # base_dir="$1"; save_list="$2"
  local base_dir save_list
  base_dir="$1"; save_list="$2"

  for element in ${save_list}
  do
    file_list="${file_list} ${base_dir}/${element}"
  done
}


## ########################################################################## ##

